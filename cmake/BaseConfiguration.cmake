############# Common includes ##################################################
include(${CMAKE_CURRENT_LIST_DIR}/platform.cmake)

############# Common settings ##################################################

# Linker include for build output dir
link_directories(${CMAKE_LIBRARY_OUTPUT_DIRECTORY})

############# AUX funcs/macros #################################################
macro(remove_autogenerated_compile_flags)
    foreach(flag_name ${ARGN})
        if (NOT CMAKE_CXX_FLAGS STREQUAL "")
            string (REPLACE ${flag_name} "" CMAKE_CXX_FLAGS         ${CMAKE_CXX_FLAGS})
        endif()
        if (NOT CMAKE_CXX_FLAGS_DEBUG STREQUAL "")
            string (REPLACE ${flag_name} "" CMAKE_CXX_FLAGS_DEBUG   ${CMAKE_CXX_FLAGS_DEBUG})
        endif()
        if (NOT CMAKE_CXX_FLAGS_RELEASE STREQUAL "")
            string (REPLACE ${flag_name} "" CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE})
        endif()
    endforeach()
endmacro(remove_autogenerated_compile_flags)

macro(use_precompiled_header file_name) # file_name without extension
    set(CMAKE_CXX_FLAGS_DEBUG   "${CMAKE_CXX_FLAGS_DEBUG}   /Yu${file_name}.h")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Yu${file_name}.h")
    set_source_files_properties(${file_name}.cpp PROPERTIES COMPILE_FLAGS "/Yc${file_name}.h")
endmacro(use_precompiled_header)

macro(warnings_as_errors)
    if (UNIX)
        if (${ARGV0}) # enable when warnings are cleaned up
            add_definitions(-Werror)
        endif (${ARGV0})
    else (UNIX)
        if (TARGET_PLATFORM STREQUAL x32)
            add_definitions(/WX)
        else (TARGET_PLATFORM STREQUAL x32) # TODO: think of it
            if (${ARGV0}) # enable when warnings are cleaned up
                add_definitions(/WX)
            endif (${ARGV0})
        endif (TARGET_PLATFORM STREQUAL x32)
    endif (UNIX)
endmacro(warnings_as_errors)

macro(setup_target_output target)
    if (MSVC)
        set_property(TARGET ${target} PROPERTY RUNTIME_OUTPUT_DIRECTORY_DEBUG   ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Debug)
        set_property(TARGET ${target} PROPERTY RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Release)
        set_property(TARGET ${target} PROPERTY LIBRARY_OUTPUT_DIRECTORY_DEBUG   ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/Debug)
        set_property(TARGET ${target} PROPERTY LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/Release)
        set_property(TARGET ${target} PROPERTY ARCHIVE_OUTPUT_DIRECTORY_DEBUG   ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/Debug)
        set_property(TARGET ${target} PROPERTY ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/Release)
    endif()
endmacro(setup_target_output)

############# Windows/VS specific ##############################################
if (MSVC)
    add_definitions(/D_UNICODE /DUNICODE /W3 /Zi /wd4995)
    if (TARGET_PLATFORM STREQUAL x32)
        add_definitions(/arch:SSE2)
    else (TARGET_PLATFORM STREQUAL x32)
        add_definitions(/wd4985) # ceil incompatibility between math.h and intrin.h in VS 2008
    endif (TARGET_PLATFORM STREQUAL x32)
    set(CMAKE_CXX_FLAGS_DEBUG   "${CMAKE_CXX_FLAGS_DEBUG}    /Od ")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}  /Ox /Oi /Ot /GL /Gy /GS-")
    set(CMAKE_EXE_LINKER_FLAGS_DEBUG      "${CMAKE_EXE_LINKER_FLAGS_DEBUG}      /INCREMENTAL:NO /DEBUG /LARGEADDRESSAWARE" )
    set(CMAKE_EXE_LINKER_FLAGS_RELEASE    "${CMAKE_EXE_LINKER_FLAGS_RELEASE}    /INCREMENTAL:NO /DEBUG /LARGEADDRESSAWARE /LTCG" )
    set(CMAKE_SHARED_LINKER_FLAGS_DEBUG   "${CMAKE_SHARED_LINKER_FLAGS_DEBUG}   /INCREMENTAL:NO /DEBUG /LARGEADDRESSAWARE" )
    set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE} /INCREMENTAL:NO /DEBUG /LARGEADDRESSAWARE /LTCG" )
endif(MSVC)

if (WIN32)
    add_definitions(/D_WIN32_WINNT=0x0601 /DWINVER=0x0601 /DNOMINMAX)
endif (WIN32)

############# Linux specific ###################################################
if (UNIX)
    #add_definitions(-m32 -Wall -D__LINUX -fvisibility=hidden)
    add_definitions(-Wall -D__LINUX -fvisibility=hidden)
    if (PLATFORM EQUAL 0)
        add_definitions(-msse2 -mfpmath=sse)
    endif()

    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O0")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O2")

    #set(CMAKE_EXE_LINKER_FLAGS      "${CMAKE_EXE_LINKER_FLAGS}      -m32 -z defs")
    set(CMAKE_EXE_LINKER_FLAGS      "${CMAKE_EXE_LINKER_FLAGS}      -z defs")
    #set(CMAKE_SHARED_LINKER_FLAGS   "${CMAKE_SHARED_LINKER_FLAGS}   -m32 -z defs")
    set(CMAKE_SHARED_LINKER_FLAGS   "${CMAKE_SHARED_LINKER_FLAGS}   -z defs")
endif(UNIX)

############## Runtime install #################################################
function(install_binaries targets library source_dir Release_filenames)
    set(FULL_NAMES)
    set(Release_FNAMES ${Release_filenames})

    if (${ARGC} GREATER 4)
        set(Debug_FNAMES ${ARGV4})
    else()
        set(Debug_FNAMES ${Release_filenames})
    endif()

    foreach(TARGET Debug Release)
        foreach(BINARY ${${TARGET}_FNAMES})

            if (UNIX)
                file(GLOB SoFiles RELATIVE ${source_dir} "${source_dir}/${BINARY}*")
                foreach(SoFile ${SoFiles})
                    set(FULLNAME ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${SoFile})
                    add_custom_command(
                            OUTPUT ${FULLNAME}
                            DEPENDS ${source_dir}/${SoFile}
                            COMMAND cp -P ${source_dir}/${SoFile} ${FULLNAME}
                    )
                    list(APPEND FULL_NAMES ${FULLNAME})
                endforeach()
            else ()
                set(FULLNAME ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${TARGET}/${BINARY})
                list(APPEND FULL_NAMES ${FULLNAME})
                add_custom_command(
                        OUTPUT ${FULLNAME}
                        DEPENDS ${source_dir}/${BINARY}
                        COMMAND ${CMAKE_COMMAND} -E copy_if_different ${source_dir}/${BINARY} ${FULLNAME}
                )
            endif()

        endforeach(BINARY)
    endforeach(TARGET)

    add_custom_target(${library}_binaries_install DEPENDS ${FULL_NAMES})
    set_property(TARGET ${library}_binaries_install PROPERTY FOLDER "CMakeInstallTargets")

    foreach(TARGET ${targets})
        add_dependencies(${TARGET} ${library}_binaries_install)
    endforeach(TARGET)

endfunction(install_binaries)
